{"version":3,"sources":["lib/Effects.ts","canvas/Canvas.tsx","canvas/AnimateFx.ts","canvas/animator/Colors.ts","canvas/animations/CanvasCountDown.ts","canvas/animator/SelectRandom.ts","App.tsx","index.tsx"],"names":["getSize","el","width","offsetWidth","height","offsetHeight","Canvas","props","animator","ref","useRef","size","handlers","_useState","useState","current","_useState2","Object","slicedToArray","ComponentSize","setComponentSize","handleResize","useCallback","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","handler","value","err","return","debounceHandleResize","debounce","useLayoutEffect","window","addEventListener","removeEventListener","useComponentSize","onResize","_canvas","canvasRef","frameRef","canvas","setCanvas","requestAnimationFrame","doFrame","touchStart","touchMove","touchEnd","mouseLeft","mouseRight","cancelAnimationFrame","useAnimationFrame","react_default","a","createElement","className","COLORS","defaultOptions","freeze","color","lineWidth","callback","callbackInterval","countDownWithWrap","time","_options","options","assign","ctx","getContext","perimeterLength","offset","invocationInterval","invocationCount","rate","elapsed","reset","draw","delta","console","log","concat","beginPath","strokeStyle","moveTo","length","lineTo","stroke","State","SelectRandom","_this","this","classCallCheck","lastFrame","activeTouches","colors","state","enableResetFlag","countDownToLock","countDownToSelect","selectedIndex","rect","getBoundingClientRect","x","left","y","top","lockPlayers","selectRandomPlayer","Selecting","selectedId","Math","floor","random","id","filter","t","Finished","copyTouch","touch","identifier","position","pageX","pageY","updateTouches","touchEvent","Empty","Listening","touches","Array","from","targetTouches","map","touchCount","clickAsTouch","mouseEvent","clientX","clientY","toConsumableArray","clickToCancel","preventDefault","slice","elapsedTime","fillStyle","fillRect","arc","PI","fill","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","testRender","App","src_canvas_Canvas","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.60cfd03a.chunk.js","sourcesContent":["import { useState, useEffect, useRef, DOMElement, useCallback, useLayoutEffect } from \"react\";\r\nimport { debounce } from \"lodash\";\r\n\r\nfunction getSize(el: HTMLElement | any) {\r\n  if (!el) {\r\n    return {\r\n      width: 0,\r\n      height: 0\r\n    }\r\n  }\r\n\r\n  return {\r\n    width: el.offsetWidth,\r\n    height: el.offsetHeight\r\n  }\r\n}\r\n\r\n// https://github.com/rehooks/component-size/blob/master/index.js\r\nexport function useComponentSize<T>(ref: React.RefObject<T>, handlers?: (() => void)[]) {\r\n  let [ComponentSize, setComponentSize] = useState(\r\n    getSize(ref ? ref.current : {})\r\n  )\r\n\r\n  const handleResize = useCallback(\r\n    function handleResize() {\r\n      if (ref.current) {\r\n        setComponentSize(getSize(ref.current))\r\n        if(handlers) {\r\n          for(let handler of handlers) {\r\n            handler();\r\n          }\r\n        }\r\n      }\r\n    },\r\n    [ref]\r\n  )\r\n\r\n  const debounceHandleResize = debounce(handleResize, 300)\r\n\r\n  useLayoutEffect(\r\n    () => {\r\n      if (!ref.current) {\r\n        return\r\n      }\r\n      debounceHandleResize()\r\n      window.addEventListener('resize', debounceHandleResize)\r\n      return () => {\r\n        window.removeEventListener('resize', debounceHandleResize)\r\n      }\r\n    },\r\n    [ref.current]\r\n  )\r\n  return ComponentSize\r\n}\r\n\r\nexport function useWindowWidth() {\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  const elem = useRef(null);\r\n  useEffect(() => {\r\n    const handleResize = () => setWidth(window.innerWidth);\r\n    const debounceHandleResize = debounce(handleResize, 350);\r\n\r\n    window.addEventListener('resize', debounceHandleResize);\r\n    return () => {\r\n      window.removeEventListener('resize', debounceHandleResize);\r\n    };\r\n  });\r\n  \r\n  return width;\r\n}\r\n\r\nexport function useComponentTouch<T extends HTMLElement>(ref: React.RefObject<T>) {\r\n  let [ComponentSize, setComponentSize] = useState(\r\n    getSize(ref ? ref.current : {})\r\n  )\r\n\r\n  const onTouchStart = useCallback(\r\n    function onTouchStart() {\r\n      if (ref.current) {\r\n        setComponentSize(getSize(ref.current))\r\n      }\r\n    },\r\n    [ref]\r\n  )\r\n\r\n  const onTouchMove = useCallback(\r\n    function onTouchMove() {\r\n      if (ref.current) {\r\n        setComponentSize(getSize(ref.current))\r\n      }\r\n    },\r\n    [ref]\r\n  )\r\n\r\n  const onTouchEnd = useCallback(\r\n    function onTouchEnd() {\r\n      if (ref.current) {\r\n        setComponentSize(getSize(ref.current))\r\n      }\r\n    },\r\n    [ref]\r\n  )\r\n\r\n  useLayoutEffect(\r\n    () => {\r\n      if (ref == null || !ref.current) {\r\n        return\r\n      }\r\n      \r\n      ref.current.addEventListener('touchstart', onTouchStart)\r\n      ref.current.addEventListener('touchmove', onTouchMove)\r\n      ref.current.addEventListener('touchend', onTouchEnd)\r\n      return () => {\r\n        const node = ref.current!;\r\n        node.removeEventListener('touchstart', onTouchStart)\r\n        node.removeEventListener('touchmove', onTouchMove)\r\n        node.removeEventListener('touchend', onTouchEnd)\r\n      }\r\n    },\r\n    [ref.current]\r\n  )\r\n  return ComponentSize\r\n}\r\n\r\nexport default useWindowWidth;","import React from 'react';\r\nimport { useWindowWidth, useComponentSize } from '../lib/Effects';\r\nimport { useRef } from 'react';\r\nimport { useAnimationFrame } from './AnimateFx';\r\nimport \"./Canvas.css\";\r\nimport IAnimationHandler from './animator/IAnimationHandler';\r\n\r\ninterface ICanvasProps {\r\n  width: number,\r\n  height: number,\r\n  animator: IAnimationHandler\r\n} \r\n\r\nconst Canvas: React.FC<ICanvasProps> = (props: ICanvasProps) => {\r\n  const animator = props.animator;\r\n  let ref = useRef<HTMLCanvasElement>(null)\r\n  let size = useComponentSize<HTMLElement>(ref, [animator.onResize])\r\n  let anim = useAnimationFrame(ref, animator)\r\n  // size == { width: 100, height: 200 }\r\n  let { width, height } = size\r\n  return (\r\n    <div className=\"Canvas\">\r\n      {width}\r\n      <canvas ref={ref} height={height} width={width}></canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Canvas;","import { useRef, useLayoutEffect, RefObject } from \"react\";\r\nimport IAnimationHandler from \"./animator/IAnimationHandler\";\r\n\r\nexport function useAnimationFrame(_canvas: RefObject<HTMLCanvasElement>, animator: IAnimationHandler) {\r\n  const canvasRef = useRef(_canvas);\r\n\r\n  useLayoutEffect(\r\n    () => {\r\n      canvasRef.current = _canvas;\r\n    },\r\n    [_canvas]\r\n  )\r\n\r\n  const loop: FrameRequestCallback = (delta: number) => {\r\n    // const elapsed = delta - lastDelta;\r\n    // lastDelta = delta;\r\n    // console.log(elapsed);\r\n    // frameRef.current = requestAnimationFrame(\r\n    //   loop\r\n    // );\r\n    // const cb = callbackRef.current;\r\n    // const canvas = _canvas.current;\r\n    // const ctx = canvas != null ? canvas.getContext('2d') : null; \r\n    // if(canvas != null && ctx != null) {\r\n    //   cb(canvas, ctx);\r\n    // }\r\n  };\r\n\r\n  const frameRef = useRef<number>();\r\n  useLayoutEffect(() => {\r\n    const canvas = _canvas.current;\r\n    if(canvas != null) {\r\n      animator.setCanvas(canvas)\r\n      frameRef.current = requestAnimationFrame(\r\n        animator.doFrame\r\n      );\r\n      \r\n      canvas.addEventListener('touchstart', animator.touchStart);\r\n      canvas.addEventListener('touchmove', animator.touchMove);\r\n      canvas.addEventListener('touchend', animator.touchEnd);\r\n      canvas.addEventListener('click', animator.mouseLeft);\r\n      canvas.addEventListener('contextmenu', animator.mouseRight);\r\n      \r\n      return () => {\r\n        cancelAnimationFrame(frameRef.current!);\r\n\r\n        canvas.removeEventListener('touchstart', animator.touchStart);\r\n        canvas.removeEventListener('touchmove', animator.touchMove);\r\n        canvas.removeEventListener('touchend', animator.touchEnd);\r\n        canvas.removeEventListener('click', animator.mouseLeft);\r\n        canvas.removeEventListener('contextmenu', animator.mouseRight);\r\n      }\r\n    }\r\n  }, []);\r\n};","export const COLORS = [\r\n  \"#C0C0C0\", // silver\r\n  \"#FF0000\", // red\r\n  \"#800000\", // maroon\r\n  \"#FFFF00\", // yellow\r\n  \"#808000\", // olive\r\n  \"#00FF00\", // lime\r\n  \"#008000\", // green\r\n  \"#00FFFF\", // aqua\r\n  \"#008080\", // teal\r\n  \"#0000FF\", // blue\r\n  \"#000080\", // navy\r\n  \"#FF00FF\", // fuschia\r\n  \"#800080\", // purple\\\r\n]","\r\nexport interface ICountDownOptions {\r\n  color?: string,\r\n  lineWidth?: number,\r\n  callback?: (() => void),\r\n  callbackInterval?: number\r\n}\r\n\r\nconst defaultOptions = Object.freeze({\r\n  color: \"black\",\r\n  lineWidth: 5,\r\n  callback: () => {},\r\n  callbackInterval: 1\r\n})\r\n\r\n\r\nexport function countDownWithWrap(canvas: HTMLCanvasElement, time: number, _options: ICountDownOptions): any {\r\n  const options = Object.assign({}, defaultOptions, _options)\r\n  const lineWidth = options.lineWidth\r\n  const color = options.color\r\n  const callback = options.callback\r\n  const ctx = canvas.getContext(\"2d\")!\r\n  const width = canvas.width - lineWidth\r\n  const height = canvas.height - lineWidth\r\n  const perimeterLength = 2 * (width + height)\r\n  const offset = lineWidth / 2\r\n  const invocationInterval = time / options.callbackInterval\r\n  let invocationCount = 0\r\n\r\n  const rate = perimeterLength / time\r\n  let elapsed = 0\r\n\r\n  return ({\r\n    reset() {\r\n      elapsed = 0\r\n      invocationCount = 0\r\n      return\r\n    },\r\n\r\n    draw(delta: number) {\r\n      elapsed += delta\r\n      if(elapsed > time) {\r\n        elapsed = time\r\n      }\r\n      if(elapsed >= (invocationCount + 1) * invocationInterval) {\r\n        console.log(`invocation ${invocationCount}`)\r\n        callback()\r\n        invocationCount++\r\n      }\r\n      ctx.beginPath()\r\n      ctx.lineWidth = lineWidth\r\n      ctx.strokeStyle = color\r\n      ctx.moveTo(offset, offset)\r\n\r\n      let length = rate * elapsed\r\n      if(length <= width) {\r\n        ctx.lineTo(length + offset, offset)\r\n        ctx.stroke()\r\n        return\r\n      }\r\n      ctx.lineTo(width + offset, offset)\r\n      length -= width\r\n      if(length <= height) {\r\n        ctx.lineTo(width + offset, length + offset)\r\n        ctx.stroke()\r\n        return\r\n      }\r\n      ctx.lineTo(width + offset, height + offset)\r\n      length -= height\r\n      if(length <= width) {\r\n        ctx.lineTo(width - length + offset, height + offset)\r\n        ctx.stroke()\r\n        return\r\n      }\r\n      ctx.lineTo(offset, height + offset)\r\n      length -= width\r\n      if(length <= height) {\r\n        ctx.lineTo(offset, height - length + offset)\r\n        ctx.stroke()\r\n        return\r\n      }\r\n      ctx.lineTo(offset, offset)\r\n      ctx.stroke()\r\n    }\r\n  });\r\n}","import IAnimationHandler from './IAnimationHandler';\r\nimport { COLORS } from './Colors';\r\nimport { countDownWithWrap } from '../animations/CanvasCountDown';\r\n\r\ninterface ITouch {\r\n  id: number\r\n  color: string\r\n  position: IPoint\r\n}\r\n\r\ninterface IPoint {\r\n  x: number\r\n  y: number\r\n}\r\n\r\n//configuration\r\nconst circleRadius = 60\r\nconst backgroundColor = 'black'\r\n\r\nenum State {\r\n  Empty, \r\n  Listening,\r\n  Selecting,\r\n  Finished\r\n}\r\n\r\nclass SelectRandom implements IAnimationHandler {\r\n  touchStart: (te: TouchEvent) => void\r\n  touchMove: (te: TouchEvent) => void\r\n  touchEnd: (te: TouchEvent) => void\r\n  mouseLeft: (me: MouseEvent) => void\r\n  mouseRight: (me: MouseEvent) => void\r\n\r\n  lastFrame: number\r\n  canvas: HTMLCanvasElement | null\r\n  ctx: CanvasRenderingContext2D | null\r\n  width: number\r\n  height: number\r\n\r\n  activeTouches: ITouch[]\r\n  colors: string[]\r\n  offset: IPoint\r\n  state: State\r\n  enableResetFlag: boolean\r\n\r\n  countDownToLock: any\r\n  countDownToSelect: any\r\n  selectedIndex: number\r\n\r\n  constructor() {\r\n    this.lastFrame = 0\r\n    this.touchStart = this.updateTouches\r\n    this.touchMove = this.updateTouches\r\n    this.touchEnd = this.updateTouches\r\n    this.mouseLeft = this.clickAsTouch\r\n    this.mouseRight = this.clickToCancel\r\n\r\n    this.canvas = null\r\n    this.ctx = null\r\n    this.countDownToLock = null\r\n    this.selectedIndex = -1\r\n\r\n    this.activeTouches = []\r\n    this.colors = [...COLORS]\r\n    this.offset = { x: 0, y: 0 }\r\n    this.height = this.width = 0\r\n    this.state = State.Empty\r\n    this.enableResetFlag = false\r\n  }\r\n\r\n  setCanvas = (_canvas: HTMLCanvasElement) => {\r\n    this.canvas = _canvas\r\n    this.ctx = this.canvas.getContext('2d')!\r\n    this.onResize()\r\n  }\r\n\r\n  onResize = () => {\r\n    const rect = this.canvas!.getBoundingClientRect()\r\n    this.offset = { x: rect.left, y: rect.top }\r\n    const canvas = this.canvas!\r\n    this.width = canvas.width\r\n    this.height = canvas.height\r\n    this.countDownToLock = countDownWithWrap(canvas, 2000, { color: \"red\", callback: this.lockPlayers, lineWidth: 10 })\r\n    \r\n  }\r\n\r\n  lockPlayers = () => {\r\n    this.countDownToSelect = countDownWithWrap(this.canvas!, 4000, { color: \"yellow\", callback: this.selectRandomPlayer, callbackInterval: this.activeTouches.length - 1, lineWidth: 10 })\r\n    this.state = State.Selecting\r\n  }\r\n\r\n  selectRandomPlayer = () => {\r\n    const selectedId = this.activeTouches[Math.floor(Math.random() * this.activeTouches.length)].id\r\n    this.activeTouches = this.activeTouches.filter(t => t.id != selectedId)\r\n    if(this.activeTouches.length == 1) {\r\n      this.state = State.Finished\r\n    }\r\n  }\r\n\r\n  copyTouch = (touch: Touch): ITouch => {\r\n    return { \r\n      id: touch.identifier,\r\n      position: { x: touch.pageX - this.offset.x, y: touch.pageY - this.offset.y },\r\n      color: this.colors[touch.identifier]\r\n    }\r\n  }\r\n\r\n  updateTouches = (touchEvent: TouchEvent) => {\r\n    if(this.state == State.Empty || this.state == State.Listening) {\r\n      const touches = Array.from(touchEvent.targetTouches)\r\n      if(touches.length != this.activeTouches.length) {\r\n        this.countDownToLock.reset()\r\n      }\r\n      this.activeTouches = touches.map(t => this.copyTouch(t))\r\n      const touchCount = this.activeTouches.length\r\n      if(touchCount <= 1) {\r\n        this.state = State.Empty\r\n      }\r\n      if(touchCount > 1) {\r\n        this.state = State.Listening\r\n      }\r\n    }\r\n    if(this.state == State.Finished) {\r\n      if(touchEvent.targetTouches.length > 0 && this.enableResetFlag) {\r\n        this.state = State.Empty\r\n        this.enableResetFlag = false\r\n      }\r\n      if(touchEvent.targetTouches.length == 0) {\r\n        this.enableResetFlag = true\r\n      }\r\n    }\r\n  }\r\n\r\n  clickAsTouch = (mouseEvent: MouseEvent) => {\r\n    if(this.state == State.Empty || this.state == State.Listening) {\r\n      const id = this.activeTouches.length;\r\n      const touch = { \r\n        id,\r\n        position: { x: mouseEvent.clientX - this.offset.x, y: mouseEvent.clientY - this.offset.y },\r\n        color: this.colors[id]\r\n      }\r\n\r\n      this.activeTouches = [...this.activeTouches, touch];\r\n      if(this.activeTouches.length > 1 && this.state == State.Empty) {\r\n        this.state = State.Listening\r\n      }\r\n      this.countDownToLock.reset();\r\n    }\r\n\r\n    if(this.state == State.Finished) {\r\n      this.activeTouches = []\r\n      this.state = State.Empty\r\n    }\r\n  }\r\n\r\n  clickToCancel = (mouseEvent: MouseEvent) => {\r\n    mouseEvent.preventDefault();\r\n    if(this.activeTouches.length == 0 || this.state == State.Selecting) {\r\n      return\r\n    }\r\n\r\n    if(this.state == State.Finished) {\r\n      this.activeTouches = []\r\n      this.state = State.Empty\r\n      return\r\n    }\r\n\r\n    this.activeTouches = this.activeTouches.slice(0, -1);\r\n    if(this.activeTouches.length <= 1) {\r\n      this.state = State.Empty\r\n    }\r\n    this.countDownToLock.reset();\r\n  }\r\n\r\n  doFrame = (elapsedTime: number) => {\r\n    const delta = elapsedTime - this.lastFrame\r\n    this.lastFrame = elapsedTime\r\n    window.requestAnimationFrame(this.doFrame)\r\n    \r\n    if(this.ctx == null || this.ctx == undefined) {\r\n      return\r\n    }\r\n    \r\n    const ctx = this.ctx\r\n    ctx.fillStyle = backgroundColor\r\n    ctx.fillRect(0,0, this.width, this.height)\r\n\r\n    if(this.state == State.Empty) {\r\n      this.countDownToLock.reset()\r\n    }\r\n\r\n    if(this.state != State.Finished)\r\n    {\r\n      for(let touch of this.activeTouches) {\r\n        ctx.beginPath()\r\n        ctx.fillStyle = touch.color\r\n        ctx.arc(touch.position.x, touch.position.y, circleRadius, 0, Math.PI * 2)\r\n        ctx.fill()\r\n      }\r\n    }\r\n\r\n    if(this.state == State.Listening) {\r\n      this.countDownToLock.draw(delta)\r\n    }\r\n\r\n    if(this.state == State.Selecting) {\r\n      this.countDownToSelect.draw(delta);\r\n    }\r\n\r\n    if(this.state == State.Finished) {\r\n      for(let touch of this.activeTouches) {\r\n        ctx.beginPath()\r\n        ctx.fillStyle = touch.color\r\n        ctx.arc(touch.position.x, touch.position.y, circleRadius, 0, Math.PI * 2)\r\n        ctx.fill()\r\n      }\r\n    }\r\n  }\r\n\r\n  testRender = () => {\r\n    this.activeTouches = [{\r\n      id: 0,\r\n      position: {\r\n        x: 50,\r\n        y: 50\r\n      },\r\n      color: this.colors[0]\r\n    }, {\r\n      id: 1,\r\n      position: {\r\n        x: 100,\r\n        y: 50\r\n      },\r\n      color: this.colors[1]\r\n    }]\r\n  }\r\n}\r\n\r\nexport default SelectRandom;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Canvas from './canvas/Canvas';\nimport SelectRandom from './canvas/animator/SelectRandom';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n        <p>Testing</p>\n      <Canvas height={400} width={600} animator={ new SelectRandom() } />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}